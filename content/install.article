Before you start: environment, IDE, books, and ressources
Before you start being productive in go, some things need to be setup on your machine

* Install Golang

If you come from the python community, it is important to emphasize that the installation of the golang environment is only necessary for the developement and testing phase. In general, you do not install the language on the machine you deploy on in production. This is due to the nature of the language (*compiled*) which creates a binary using the tooling.

You have the choice between several methods. 

** Baremetal

In this method, Go will be installed directly on your machine. You can use one of the two following options.

*Manual*

To get started, go to the following address: [[http://golang.org/dl/]] and download the Linux archive file. At the time of writing this tutorial, the version of Go is 1.12.4 in 64-bit amd.

To extract and copy the content under `/usr/local/` you can execute the following command:

  tar -C /usr/local -xzf go1.12.4.linux-amd64.tar.gz

Then we need to update the environment variabel PATH to include go's binaries:

  export PATH=$PATH:/usr/local/go/bin

Finally, you can test if the installation succeeded:

  go version

The result looks like:

  go version go1.12.3 linux/amd64

To explore the installation process more deeply, you can go to [[https://golang.org/doc/install]]

*Automated*

I recommend the following project to install and update to the latest version of Golang on you system:

.link https://github.com/udhos/update-golang

Using three simple command, you can have an up an running Golang install, in few seconds:

  git clone https://github.com/udhos/update-golang
  cd update-golang
  sudo ./update-golang.sh

** Virtual Machine

In this method, we use a virtual machine to create a development environment for Golang.

The following project uses Vagrant to create such environment:

.link https://github.com/abousselmi/vagrant-ubuntu-golang

** Container

Just like using a dedicated Virtual Machine as a development environment, you can also use a Docker container very easely.

The following image (just an example, you can find others, or create your own) to launch a Golang development environment container:

.link https://github.com/cburki/docker-golang-dev

* Setup the IDE/Plugins

Multiple IDEs/Plugins are available to start writing Go code. 

.link https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins

The golang community recommends some:

.html install/ide-plugin.html

Feel free to choose the IDE/Plugin that suits you best. In the following we are going to use VSC.

** Install Visual Studio Code

*Debian*

For debian based systems you can use eather a .deb package or a snap.

You can download the latest version here:

.link https://code.visualstudio.com/download

Then you can use the following command to install VSC:

  sudo apt install ./code_1.34.0-1557957934_amd64.deb

*Snap*

You can use the following command to install VSC

  sudo snap install code --classic

Once you installed VCS, you can download some useful plugins using Ctrl+Shift+X and search for Go and Docker.

* Compiling your first Hello World !

A simple [[https://en.wikipedia.org/wiki/%22Hello,_World!%22_program][Hello World]] program is shown on the code section on the right side of the screen.

To run it, you can click on the *Run* button, at the bottom of the code section. Feel free to modify it and re-compile it :)

.play install/hellogopher.go

** Walkthrough

This program present three of the main section of a typical go program:

.html install/hw-walkthrough.html

* Deployment

You can use the following Dockerfile as an example to compile a static binary and deploy it in production.

To learn more about the syntax of a Dockerfile, please visit the following link:

.link https://docs.docker.com/engine/reference/builder/

.play install/Dockerfile

** Walkthrough

*FROM*

The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. As such, a valid Dockerfile must start with a FROM instruction.

FROM golang:1.12-alpine AS build

We are using the most recent golang version (at the time of writing) in an Alpine base image. We also give the name build to this base image using the keywork AS. 

You can also notice that we are using FROM two times in this Dockerfile. This means that we are creating a multi-stage build, where the first stage is called build, and the second (the last one) is going to give us our final result (Docker image) using artifacts from previous stages.

To learn more about muti-stage build, please visit:

.link https://docs.docker.com/develop/develop-images/multistage-build/

*COPY*

The COPY instruction copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.
Multiple <src> resources may be specified but the paths of files and directories will be interpreted as relative to the source of the context of the build.

In this example, we are copying all the content of the current folder (the path of our Dockerfile) to the /go/src/github.com/user/hello destination folder inside our Docker image filesystem.

*WORKDIR*

The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn’t exist, it will be created even if it’s not used in any subsequent Dockerfile instruction.

In our example, we are setting the working directory (think of it as a simple cd command) to /go/src/github.com/user/hello

*RUN*

The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.

*LABEL*

The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing.

*CMD*

There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.

The main purpose of a CMD is to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction as well.

To know the difference between CMD and ENTRYPOINT, I recommend reading this blog post:

.link https://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/

* Good online resources

To go further down the path to go, the following online resources and also books might help you.

** Book 1
** Book 2

.play install/Dockerfile.another

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
